<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : src/AppBundle/Proto/ProtobufDocument.proto
 */


namespace AppBundle\Proto;

/**
 * Protobuf message : Proto.PostProto
 */
class PostProto extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * id required string = 1
     *
     * @var string
     */
    protected $id = null;

    /**
     * tags repeated string = 2
     *
     * @var \Protobuf\Collection
     */
    protected $tags = null;

    /**
     * mnemono_biz optional message = 3
     *
     * @var \AppBundle\Proto\MnemonoBizProto
     */
    protected $mnemono_biz = null;

    /**
     * origina_link optional string = 4
     *
     * @var string
     */
    protected $origina_link = null;

    /**
     * image_links repeated string = 5
     *
     * @var \Protobuf\Collection
     */
    protected $image_links = null;

    /**
     * video_links repeated string = 6
     *
     * @var \Protobuf\Collection
     */
    protected $video_links = null;

    /**
     * import_from optional string = 7
     *
     * @var string
     */
    protected $import_from = null;

    /**
     * meta optional message = 8
     *
     * @var \AppBundle\Proto\MetaProto
     */
    protected $meta = null;

    /**
     * content optional string = 9
     *
     * @var string
     */
    protected $content = null;

    /**
     * create_at optional string = 10
     *
     * @var string
     */
    protected $create_at = null;

    /**
     * update_at optional string = 11
     *
     * @var string
     */
    protected $update_at = null;

    /**
     * Check if 'id' has a value
     *
     * @return bool
     */
    public function hasId()
    {
        return $this->id !== null;
    }

    /**
     * Get 'id' value
     *
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set 'id' value
     *
     * @param string $value
     */
    public function setId($value)
    {
        $this->id = $value;
    }

    /**
     * Check if 'tags' has a value
     *
     * @return bool
     */
    public function hasTagsList()
    {
        return $this->tags !== null;
    }

    /**
     * Get 'tags' value
     *
     * @return \Protobuf\Collection
     */
    public function getTagsList()
    {
        return $this->tags;
    }

    /**
     * Set 'tags' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setTagsList(\Protobuf\Collection $value = null)
    {
        $this->tags = $value;
    }

    /**
     * Add a new element to 'tags'
     *
     * @param string $value
     */
    public function addTags($value)
    {
        if ($this->tags === null) {
            $this->tags = new \Protobuf\ScalarCollection();
        }

        $this->tags->add($value);
    }

    /**
     * Check if 'mnemono_biz' has a value
     *
     * @return bool
     */
    public function hasMnemonoBiz()
    {
        return $this->mnemono_biz !== null;
    }

    /**
     * Get 'mnemono_biz' value
     *
     * @return \AppBundle\Proto\MnemonoBizProto
     */
    public function getMnemonoBiz()
    {
        return $this->mnemono_biz;
    }

    /**
     * Set 'mnemono_biz' value
     *
     * @param \AppBundle\Proto\MnemonoBizProto $value
     */
    public function setMnemonoBiz(\AppBundle\Proto\MnemonoBizProto $value = null)
    {
        $this->mnemono_biz = $value;
    }

    /**
     * Check if 'origina_link' has a value
     *
     * @return bool
     */
    public function hasOriginaLink()
    {
        return $this->origina_link !== null;
    }

    /**
     * Get 'origina_link' value
     *
     * @return string
     */
    public function getOriginaLink()
    {
        return $this->origina_link;
    }

    /**
     * Set 'origina_link' value
     *
     * @param string $value
     */
    public function setOriginaLink($value = null)
    {
        $this->origina_link = $value;
    }

    /**
     * Check if 'image_links' has a value
     *
     * @return bool
     */
    public function hasImageLinksList()
    {
        return $this->image_links !== null;
    }

    /**
     * Get 'image_links' value
     *
     * @return \Protobuf\Collection
     */
    public function getImageLinksList()
    {
        return $this->image_links;
    }

    /**
     * Set 'image_links' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setImageLinksList(\Protobuf\Collection $value = null)
    {
        $this->image_links = $value;
    }

    /**
     * Add a new element to 'image_links'
     *
     * @param string $value
     */
    public function addImageLinks($value)
    {
        if ($this->image_links === null) {
            $this->image_links = new \Protobuf\ScalarCollection();
        }

        $this->image_links->add($value);
    }

    /**
     * Check if 'video_links' has a value
     *
     * @return bool
     */
    public function hasVideoLinksList()
    {
        return $this->video_links !== null;
    }

    /**
     * Get 'video_links' value
     *
     * @return \Protobuf\Collection
     */
    public function getVideoLinksList()
    {
        return $this->video_links;
    }

    /**
     * Set 'video_links' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setVideoLinksList(\Protobuf\Collection $value = null)
    {
        $this->video_links = $value;
    }

    /**
     * Add a new element to 'video_links'
     *
     * @param string $value
     */
    public function addVideoLinks($value)
    {
        if ($this->video_links === null) {
            $this->video_links = new \Protobuf\ScalarCollection();
        }

        $this->video_links->add($value);
    }

    /**
     * Check if 'import_from' has a value
     *
     * @return bool
     */
    public function hasImportFrom()
    {
        return $this->import_from !== null;
    }

    /**
     * Get 'import_from' value
     *
     * @return string
     */
    public function getImportFrom()
    {
        return $this->import_from;
    }

    /**
     * Set 'import_from' value
     *
     * @param string $value
     */
    public function setImportFrom($value = null)
    {
        $this->import_from = $value;
    }

    /**
     * Check if 'meta' has a value
     *
     * @return bool
     */
    public function hasMeta()
    {
        return $this->meta !== null;
    }

    /**
     * Get 'meta' value
     *
     * @return \AppBundle\Proto\MetaProto
     */
    public function getMeta()
    {
        return $this->meta;
    }

    /**
     * Set 'meta' value
     *
     * @param \AppBundle\Proto\MetaProto $value
     */
    public function setMeta(\AppBundle\Proto\MetaProto $value = null)
    {
        $this->meta = $value;
    }

    /**
     * Check if 'content' has a value
     *
     * @return bool
     */
    public function hasContent()
    {
        return $this->content !== null;
    }

    /**
     * Get 'content' value
     *
     * @return string
     */
    public function getContent()
    {
        return $this->content;
    }

    /**
     * Set 'content' value
     *
     * @param string $value
     */
    public function setContent($value = null)
    {
        $this->content = $value;
    }

    /**
     * Check if 'create_at' has a value
     *
     * @return bool
     */
    public function hasCreateAt()
    {
        return $this->create_at !== null;
    }

    /**
     * Get 'create_at' value
     *
     * @return string
     */
    public function getCreateAt()
    {
        return $this->create_at;
    }

    /**
     * Set 'create_at' value
     *
     * @param string $value
     */
    public function setCreateAt($value = null)
    {
        $this->create_at = $value;
    }

    /**
     * Check if 'update_at' has a value
     *
     * @return bool
     */
    public function hasUpdateAt()
    {
        return $this->update_at !== null;
    }

    /**
     * Get 'update_at' value
     *
     * @return string
     */
    public function getUpdateAt()
    {
        return $this->update_at;
    }

    /**
     * Set 'update_at' value
     *
     * @param string $value
     */
    public function setUpdateAt($value = null)
    {
        $this->update_at = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['id'])) {
            throw new \InvalidArgumentException('Field "id" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'tags' => [],
            'mnemono_biz' => null,
            'origina_link' => null,
            'image_links' => [],
            'video_links' => [],
            'import_from' => null,
            'meta' => null,
            'content' => null,
            'create_at' => null,
            'update_at' => null
        ], $values);

        $message->setId($values['id']);
        $message->setMnemonoBiz(MnemonoBizProto::fromArray($values['mnemono_biz']));
        $message->setOriginaLink($values['origina_link']);
        $message->setImportFrom($values['import_from']);
        $message->setMeta(MetaProto::fromArray($values['meta']));
        $message->setContent($values['content']);
        $message->setCreateAt($values['create_at']);
        $message->setUpdateAt($values['update_at']);

        foreach ($values['tags'] as $item) {
            $message->addTags($item);
        }

        foreach ($values['image_links'] as $item) {
            $message->addImageLinks($item);
        }

        foreach ($values['video_links'] as $item) {
            $message->addVideoLinks($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'PostProto',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'id',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'tags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'mnemono_biz',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.Proto.MnemonoBizProto'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'origina_link',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'image_links',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'video_links',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'import_from',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'meta',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.Proto.MetaProto'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'content',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'create_at',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'update_at',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->id === null) {
            throw new \UnexpectedValueException('Field "\\AppBundle\\Proto\\PostProto#id" (tag 1) is required but has no value.');
        }

        if ($this->id !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->id);
        }

        if ($this->tags !== null) {
            foreach ($this->tags as $val) {
                $writer->writeVarint($stream, 18);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->mnemono_biz !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeVarint($stream, $this->mnemono_biz->serializedSize($sizeContext));
            $this->mnemono_biz->writeTo($context);
        }

        if ($this->origina_link !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->origina_link);
        }

        if ($this->image_links !== null) {
            foreach ($this->image_links as $val) {
                $writer->writeVarint($stream, 42);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->video_links !== null) {
            foreach ($this->video_links as $val) {
                $writer->writeVarint($stream, 50);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->import_from !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->import_from);
        }

        if ($this->meta !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeVarint($stream, $this->meta->serializedSize($sizeContext));
            $this->meta->writeTo($context);
        }

        if ($this->content !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeString($stream, $this->content);
        }

        if ($this->create_at !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeString($stream, $this->create_at);
        }

        if ($this->update_at !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->update_at);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->id = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->tags === null) {
                    $this->tags = new \Protobuf\ScalarCollection();
                }

                $this->tags->add($reader->readString($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AppBundle\Proto\MnemonoBizProto();

                $this->mnemono_biz = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->origina_link = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->image_links === null) {
                    $this->image_links = new \Protobuf\ScalarCollection();
                }

                $this->image_links->add($reader->readString($stream));

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->video_links === null) {
                    $this->video_links = new \Protobuf\ScalarCollection();
                }

                $this->video_links->add($reader->readString($stream));

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->import_from = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AppBundle\Proto\MetaProto();

                $this->meta = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->content = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->create_at = $reader->readString($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->update_at = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->id !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->id);
        }

        if ($this->tags !== null) {
            foreach ($this->tags as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->mnemono_biz !== null) {
            $innerSize = $this->mnemono_biz->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->origina_link !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->origina_link);
        }

        if ($this->image_links !== null) {
            foreach ($this->image_links as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->video_links !== null) {
            foreach ($this->video_links as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->import_from !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->import_from);
        }

        if ($this->meta !== null) {
            $innerSize = $this->meta->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->content !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->content);
        }

        if ($this->create_at !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->create_at);
        }

        if ($this->update_at !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->update_at);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->id = null;
        $this->tags = null;
        $this->mnemono_biz = null;
        $this->origina_link = null;
        $this->image_links = null;
        $this->video_links = null;
        $this->import_from = null;
        $this->meta = null;
        $this->content = null;
        $this->create_at = null;
        $this->update_at = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AppBundle\Proto\PostProto) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->id = ($message->id !== null) ? $message->id : $this->id;
        $this->tags = ($message->tags !== null) ? $message->tags : $this->tags;
        $this->mnemono_biz = ($message->mnemono_biz !== null) ? $message->mnemono_biz : $this->mnemono_biz;
        $this->origina_link = ($message->origina_link !== null) ? $message->origina_link : $this->origina_link;
        $this->image_links = ($message->image_links !== null) ? $message->image_links : $this->image_links;
        $this->video_links = ($message->video_links !== null) ? $message->video_links : $this->video_links;
        $this->import_from = ($message->import_from !== null) ? $message->import_from : $this->import_from;
        $this->meta = ($message->meta !== null) ? $message->meta : $this->meta;
        $this->content = ($message->content !== null) ? $message->content : $this->content;
        $this->create_at = ($message->create_at !== null) ? $message->create_at : $this->create_at;
        $this->update_at = ($message->update_at !== null) ? $message->update_at : $this->update_at;
    }


}

